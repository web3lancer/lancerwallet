import { serverAdmin } from '@/lib/appwrite/server-admin';
import { AppwriteSDK } from '@/lib/appwrite';
import { Query } from 'node-appwrite';

const CHALLENGE_COLLECTION_ID = AppwriteSDK.config.collections.nonces;
const DB_ID = serverAdmin.dbId;

/**
 * Creates and stores a new WebAuthn challenge in the database.
 * @param challenge The challenge string generated by @simplewebauthn/server.
 * @returns The unique key (document ID) for this challenge.
 */
export async function createChallenge(challenge: string): Promise<string> {
  const key = serverAdmin.ID.unique();
  const expiresAt = new Date(Date.now() + 5 * 60 * 1000).toISOString(); // 5 minutes expiry

  await serverAdmin.databases.createDocument(
    DB_ID,
    CHALLENGE_COLLECTION_ID,
    key,
    {
      challenge: challenge,
      expiresAt: expiresAt,
      used: false,
    }
  );
  return key;
}

/**
 * Retrieves a challenge from the database and marks it as used to prevent replay attacks.
 * @param key The unique key (document ID) of the challenge.
 * @returns The challenge string, or null if not found, expired, or already used.
 */
export async function getAndConsumeChallenge(key: string): Promise<string | null> {
  let challengeDoc;
  try {
    challengeDoc = await serverAdmin.databases.getDocument(DB_ID, CHALLENGE_COLLECTION_ID, key);
  } catch (e: any) {
    if (e.code === 404) {
      return null; // Not found
    }
    throw e;
  }

  if (challengeDoc.used) {
    return null; // Replay attack detected
  }

  const now = new Date();
  const expiresAt = new Date(challengeDoc.expiresAt);
  if (now > expiresAt) {
    // For good hygiene, we can delete expired challenges, but for now, just deny.
    return null; // Expired
  }

  // Mark as used to prevent replay
  await serverAdmin.databases.updateDocument(DB_ID, CHALLENGE_COLLECTION_ID, key, {
    used: true,
  });

  return challengeDoc.challenge;
}
